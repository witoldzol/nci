++++++++++++++++++++++++++++++
Pros of databases:
-reduce redundancy (duplication)
-data independence (data can be used for more purposes than originally envisionaged)
-data integrity and consistancy (db's enforce rules / standardards)
-ability to share data across multiple applicatons / users
-database can be modified / data extended without impacting applications that use it
-support better security

Cons of databases:
-can be very costly
-require specialists to design and maintain
-shared data can be abused
-require controls to ensure data quality is maintained
-require strict access control

++++++++++++++++++++++++++++++
DBMS- database management system
facilitates:
-sharing and integration of data between applications
-allows multiple views of the same data
-provides controlled access to multiple users
-ensures that data is secure and conforms to standards
-allows data sharing
-improves security
- many more

cons:
-complexity
-size
-cost
-performance
-if fails, it has drastically higher impact

++++++++++++++++++++++++++++++

Data = relations
relation = table of values
table = rows and columns
row = one record // each row has a primary key // no duplicates allowed
column = attribute

++++++++++++++++++++++++++++++
DBMS - Logical layer
-db will store dictionary with the list of all database objects that exist in it
-to build a dictionary, db needs description of all logical objects that it will store
>that description is called the LOGICAL LEVEL (or logical schema)


++++++++++++++++++++++++++++++
Integrity rules:

-entity integrity
 :concerned with reality of database
 :IN RELATION each value of PRIMARY KEY must be unique and it cannot be NULL
     (in case of composite key, neither attribute can be NULL)
 
-REFERENTIAL INTEGRITY
 :(if we delete one record, that had foreign key =- that key will refere to non existent file now - what to do with it?)
 :concerns the use of foreign keys
 :concerned with preserving the relationships based on foreign keys
 :REQUIRES: every foreign key references a primary key that actually exists
 	    (if it doesn't exist, foreign key should be set to NULL)
 :STRATEGIES
  1)RESTRICT: do not allow alteration to a primary key, if there are any foreign key references to it
  2)CASCADE: we cascade effect of operation, on to the other rows that reference it
  3)SET TO NULL: we allow operation, and set all corresponding fk's values to NULL
  
++++++++++++++++++++++++++++++
VIEWS:
 -Virtual relation produced on request
 -contents are based on query on one or more relations in the database
 -views are dynamic (immediately reflect changes to relations that they display)

Purpose:
 -powerful & flexible security system: can hide data we don't want to show to some users
 -allow custom access to data, same data can be displayed in multiple ways,
 	depending on who the user is

++++++++++++++++++++++++++++++
STORED PROCEDURES:
 -prepared SQL code that is saved in database and can be reused
Pros:
 -precompiled execution: stored procedures are much faster
 -can reduce client/server trafic (long procedure is reduced to a single line)
 -can be used by multiple users, can decrease development cycle (efficient time wise)
 -security controls - users can be given rights to execute procedures that are
 	   independent of that users permissions

Examples:
--------------------
1
--------------------

DROP PROCEDURE IF EXISTS <NAME>;		--- dont put () at the end !
     	       	  	 			--- remember about ;
DELIMITER //
CREATE PROCEDURE <NAME>()			-- remember to put () and no ; !!
BEGIN
	DO SOMETHING;
END						-- no ; !!
//

CALL <NAME>();

--------------------
2
--------------------

DROP PROCEDURE IF EXISTS <NAME>;

DELIMITER //
CREATE PROCEDURE <NAME>(IN <PARA_NAME> <PARA_TYPE>)
BEGIN
	DO STUFF FROM TABLE WHRE = PARA;
END //

CALL <NAME>('<PARA>');				-- remember to use quotes ''

--------------------
1
--------------------


++++++++++++++++++++++++++++++
JOINS

Select Table.<Col_name> as <whatever_name>, OtherTable.<col_name>,
from <FIRST_TABLE>
JOIN <SECOND_TABLE>
ON <FT>.<ATR> = <ST>.<ATR>			-- compare the same atr!
JOIN <THIRD_TABLE>
ON <st>.<atr> = <tt>.<atr>

++++++++++++++++++++++++++++++
TRIGGERS


++++++++++++++++++++++++++++++




********************************************************************************
********************************************************************************
********************************************************************************

What is Structured Query Language (SQL)
SQL is divided into two main categories; Data Manipulation Language (DML), and Data Definition Language (DDL). An explanation follows.

Data Manipulation Language (DML)

DML enables you to work with the data that goes into the database. DML is used to insert, select, update, and delete records in the database. Many of your SQL statements will begin with one of the following commands:

SELECT - Retrieves data from the database
INSERT - Inserts new data into the database
UPDATE - Updates existing data in the database
DELETE - Deletes existing data from the database
Data Definition Language (DDL)

You may also occasionally need to create or drop a table or other database object. SQL enables you to do this programatically using DDL.

Examples of DDL commands:

CREATE DATABASE - Creates a new database
ALTER DATABASE - Modifies the database
DROP DATABASE - Drops (deletes) a database
CREATE TABLE - Creates a new table
ALTER TABLE - Modifies the table
DROP TABLE - Drops (deletes) a table 
SQL Function

SQL Aggregate Functions
1. SELECT SUM(PROFIT) FROM ACCOUNTS
2. SELECT SUM(PROFIT) AS MY_PROFIT FROM ACCOUNTS
SQL aggregate functions return a single value, calculated from values in a column.
Useful aggregate functions:
AVG() - Returns the average value
COUNT() - Returns the number of rows
FIRST() - Returns the first value
LAST() - Returns the last value
MAX() - Returns the largest value
MIN() - Returns the smallest value
SUM() - Returns the sum
SQL Scalar functions
SQL scalar functions return a single value, based on the input value.
Useful scalar functions:
UCASE() - Converts a field to upper case
LCASE() - Converts a field to lower case
MID() - Extract characters from a text field
LEN() - Returns the length of a text field
ROUND() - Rounds a numeric field to the number of decimals specified
NOW() - Returns the current system date and time
FORMAT() - Formats how a field is to be displayed
Add comments to your SQL statements
