Object theory

       Use case Diagram:
       
       -actors: anything outside system that interacts with the system
       -system  boundary
       - use cases // (verbs - actions)
       -no concept of time 

USE CASE: -sequence of transations performed by the system
    	  -represents one way to use the system by an actor
    	  -initiated by the actor
	  -describes the dialogue between an Actor and the system
	  -don't have to interact with the initializing agent
	  -LOG IN is not a USE CASE in itself // you don't log in jsut for the sake of itself//
	  -provides meaningful, measurable VALUE to an actor

Actor is not an USER !
      Actor is a role, not a particular person
      Particular person can be a number of actors and vice versa.

      Actor categories:
      -primary // person for whom the system is designed for, atm user (human)
      -secondary // people who perform secondary functions in system, for example, sys admin (human)
      -external hardware (non human) eg. printer
      -other systems that interact with our system

******************************

LEARN USE CASE TEMPLATE to describe use case!
      -preconditions ! (have i crashed? have i crashed? ..no no yes -> deploy airbags)
      -postconditions
      
******************************

When describing use case actions, use ACTIVE VERBS
     eg. present actor with a menu
     	 give actor money


FLOW OF EVENTS:
     	-within use cases


------------------------------

Advanced use case

***Inheritance-Associations Common Roles
	-Actor Generalization
	-<<include>>
	-<<exclude>>



-------------------- WEEK 4 ----------

CLASS DIAGRAMS:
      describes objects(classes)
      there is no sense of time in this diagram
      we will concentrate on CONCEPTUAL perspective
      we use NOUNS in this diagram to name concepts (use case used verbs)
      made out of boxes:
      	   -attributes that class has
	   -methods (operations) that class has / can do


Relationships(btw classes)
	-have to have a NAME !!!
	-0..1 to * (many) etc


Generalization: (raltionship, no need to be named)

	-"is a" relationship
	-you abstract common attributes from min two classes and put them into 'super'
	class
	-arrow with a white head

Whole / Part Aggregations (relationship, no need to name)

      -"is one obj part of another whole obj?"
      -full arrowhead
      
Composition (??)


-------------------- PROJECT --------------------

Describe individually ONE use case

Interim: up to point 5 !!!

One hardcopy and one online copy via moodle

dont use:
(no dependency relationships!)
(no association class)
(naming objects) dont bother with underlining and colons


---------------------------------------- PROJECT MANAGEMENT CLASS ----------

Project is temporary
One time effort (as opposed to Operations -ongoing)

Triple constraints:
       -Scope
       -Time
       -Cost

Project sponsor:
	-provides direction and funds.
	-identifies and defines project
	-produces business case
	-appoints project manager
	-dirive to overcome issues / obstacles
	-approves the budget funds
	
Project manager:
	-focuses on delivering the project using available resources
	-day to day management
	-escalates to project sponsor issues that are out of his/her control
	-needs to have it experience AND needs to know how to run projects in general

PM tasks:
	-direct project planning
	-obtain staff
	-build and motivate team

Project Team:
	-people who do the actual work

---------- CHARTS:

-Gantt project planner!
-Critical patch calculation


--------------------********** REVIEW ****--------------------

Functional requirements:
	   -what system needs to be able to do

Non functional requirements:
    	   -constraints
	   -(it has to do a / b in this or that limit of time)
	   -limitations need to be measurable (log in below 2seconds)

Function categories:
	 evident (system works , does obvious stuff)
	 hidden (eg. system is storing data on the hdd)
	 frill (nice-to-have things, but not necessary)



------------------------------Example for POST:  (practice run)

	1)Functional requirements:
		     -buy items    // evident
		     -return items // evident
		     -calculate change	  // evident
		     -handle credit & debit card payments  // evident
		     -store data  // hidden
		     -run analytics   //  frill
	2)Non-functional requirements:
			 -calculate change below 0.5s   // evident 
			 -run analytics report under 3s	// evident
			 -process card payment under 10s   //evident
        3)Actors:
			-clerk
			-stock system
			-bank system
	4)Use case diagram:
			
			 			 			 
------------------------------Solution to POST :

1) Functional requirements:
   	      -record current sale // evident
	      -calculate curent sale total including tax // evident
	      -reduce inventory quantities on sale // evident
	      -capture purchase info from a bar code or manual entry // evident
	      -store datea  // hiddent

2) Non functional requirements
       	      -must work on Linux / Windows
	      -must have easy interface

3) Actors
	      -	

4) Use case diagrams


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  LOG IN IS NOT A USE CASE !!! ( DONT USE IT !!) ^^^^^^^^^^^^^^^^^^^^

********** Class Diagrams Excercise:

Conceptual class idagram for POST // Buy items use case //

	   Classes:

		1)scan item
			-price
			-code
		2)user
			-login
			-password
		3)sale transaction
		       -total
		       -serial number
		4)system
		5)

      

-------------------- WEEK 6 --------------------
------------------------------------------------


ANALYSIS PHASE (OOA) :
	 -System Sequence Diagrams
	 	 
	 -Contracts
	 -



**************************************** WEEK 8 ******************************
_______________________Object Oriented Design_______________________________________________

COMMUNICATION DIAGRAMS:

PATTERNS: don't go into details

Watch video by Derek Banas

Collaboration diagrams = communication diagrams (uml1 vs uml2)

tube1763: youtube channel for rational rose


