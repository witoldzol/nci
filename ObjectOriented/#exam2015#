Q1.
--------------------------------------------------

i) Describe with the aid of an example the include relationship
   as usd in the use case modelling


	'include' is a relationship between two use cases
	it shows that one of the use cases is included in behaviour  of the other one
	can be used to extract common behaviours of two or more use cases
	       (creates abstract use case)

Example:
	Checkout for point of sale terminal use case 'includes':
		 -scanning item
		 -calculating tax
		 -payment

--------------------

ii) Draw a collaboration diagram for the 'makePayment' operation of a POST system.
    Explain various elements.


    	    Collaboration diagrams (uml1) are called Communication Diagrams in uml2
	    They show communicaton between objects
	    
	    (illustration included)	  
    
--------------------

iii) Describe with the aid an example of the Creator pattern:


     	     Patterns are: a way to reuse abstract knowledge about a problem,
	     	      	   and a way to solve it
			   Example: buildings usually need a way to enter rooms,
			   	    so when designing house, doors should be included.

             Benefits of using design patterns:
	     	      -easier to reuse tried and tested solutions
		      -help designers choose solutions that are reusable
		      -help designers solve problems faster and better


Expert:
	-who should be responsible for handling tasks?
	-> class that has all the necessary information to get the task done
	Example:
		in POST some class needs to know the total of sale
		solution:
			look for class that has all the  information necessary to
			calculate total

			-Sale class knows all the  line  items subtotals, hence,
			Sale class is the 'expert' and should handle calculation
			of the Total.

			-class lineItems can be an expert in determining Subtotals etc.


Creator:
	-who should create new instances of classes?
	-> class that
	   	 -aggregates(containes new instance)
		 -uses it
		 -has initializing data that will be passed to new instance
	Example:
		in POST Sale class incorporates lineItem class (aggregation)
		

Controller:
	-who should handle system events? (high lvl events, generated by ext actors)
	-> class that:
	   	 -respresents 'SYSTEM'
	Example:
		in POST what should be responsible for ending Sale?
		   	-POST (represents overall 'system')
			-cashier (something in real-world that is active)


********** PRESENTATION LAYER doesn't handle system events **********
********** DOMAIN LAYER should handle system events **********


iv) What are Interaction Diagrams? Illustrate your answer with examples of two
    interaction diagrams.


    Interaction diagram: -show how groups of objects collaborate to perform a task
    			 -usually show behaviour of a single use case

			 Example:
			 -sequence diagrams
			 -communication diagrams


v) Describe with examples the 'ranking / prioritisation' of use cases.

   	    	 use cases can be ranked in many ways
		 Example: based on priority:
		 	  -high (important / core use cases)
			  	for POST: make sale
				    	  
			  -medium (supporting functions)
			  	  for POST: refund items

		          -low (additional functions, nice to have, not critical)
			       for POST: cash out, shut down (no effect on architecture)




--------------------
SECTION B
--------------------

i) identify actors
   borrower
   librarian
   sys admin
   notification system
   user (abstract)
   
ii)
   use cases:
       -reserve the book / borrower + libr
       -update system user records / sys admin
       -update borrowers records / libr
       -cancel reservation / borr + libr
       -update inventory / librarian

iii)
  describe use case:
  	   1) UC name: reserve book
	   2) Actors: user
	   3) preconditions:
		-system must be online
		-user must be logged in
		-user must not be over limit

	   4) posconditions
		-user records are updated
		-book inventory/status is updated

	   5) normal flow
	      1-user searches for the book
	      2-user selects the book
	      3-user clicks 'reserve' button

	      alt flow
	      1A-book is not found in the records
	      	      1. system generates message that no such book is in system
		      2. use case returns to step 1

iv)
   create conceptual class diagram. demonstrate:
   	  -attributes
	  -relationships
	  -navigability
	  -association class
	  -multiplicity
	  -composition


   	  
   